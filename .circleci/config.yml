orbs:
  slack: circleci/slack@4.4.2
version: 2.1

executors:
  app-executor:
    docker:
        - image: circleci/node:12.18.3
    working_directory: ~/repo
  slack-executor:
    docker:
        - image: 'cibuilds/base:latest'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{checksum "package.json"}}
        - app-
  - &install-dependencies
    run:
      name: install dependencies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{checksum "package.json"}}
  - &install-aws-cli
    run:
      name: Installing AWS circleci
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd
        sudo zip ../build.zip -r * .[^.]*
        echo "build successful"


jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier
          command: npm run prettier:check
      
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS s3
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_PROD_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_STAGING_BUCKET} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_DEV_BUCKET} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
        - checkout
        - *show-current-branch-name
        - *install-aws-cli
        - *build-project
        - run:
            name: Deploy to AWS CloudFront
            command: |
              aws configure set preview.cloudfront true
              if [ "${CIRCLE_BRANCH}" == "main" ]
              then 
                aws cloudfront create-invalidation --distribution-id ${PROD_DISTRIBUTION_ID} --paths "/*"
              elif [ "${CIRCLE_BRANCH}" == "staging" ]
              then 
                aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths "/*"
              else
                aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths "/*"
              fi
  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "slack notification"
      - slack/notify:
          event: fail
          channel: 'cinema-circleci'
          template: basic_fail_1
      - slack/notify:
          event: always
          channel: 'cinema-circleci'
          template: ''
          custom: |
              {
                "blocks": 
                [
                  {
                    "type": "header",
                    "text": 
                    {
                      "type": "plain_text"
                      "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is completed. üëç"
                    }
                  },
                  {
                    "type": "section",
                    "fields": 
                    [
                      {
                        "type": "mrkdwn",
                        "text": "*Project*: \n $CIRCLE_PROJECT_REPONAME",
                        "emoji": true
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Branch*: \n $CIRCLE_BRANCH",
                        "emoji": true
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*When*: \n$(date +'%m/%d/%Y %T')",
                        "emoji": true
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Author*: \n$CIRCLE_PROJECT_USERNAME",
                        "emoji": true
                      }
                    ]
                  },
                  {
                    "action": "header",
                    "elements": 
                    [
                        {
                          "type": "button",
                          "text": 
                          {
                            "type": "plain_text",
                            "text": "View job",
                            "emoji": true
                          },
                          "url": "$CIRCLE_BUILD_URL"
                        }
                    ]
                  },
                ]
              }

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-s3: 
          requires:
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-cloudfront: 
          requires: 
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - notify-via-slack: 
          requires: 
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - main