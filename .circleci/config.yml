orbs:
  slack: circleci/slack@4.4.2
version: 2.1

executors:
  app-executor:
    docker:
        - image: circleci/node:15.5.0
    working_directory: ~/repo
  slack-executor:
    docker:
        - image: 'cibuilds/base:latest'
    resource_class: small
  terraform-executor:
    docker:
        - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{checksum "package.json"}}
        - app-
  - &install-dependencies
    run:
      name: install dependencies
      command: |
        npm install
        mkdir -p artifacts
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{checksum "package.json"}}
  - &install-aws-cli
    run:
      name: Installing AWS circleci
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd
        sudo zip ../build.zip -r * .[^.]*
        echo "build successful"


jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: copy infrastructure folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          path:
            - artifacts
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint
  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier
          command: npm run prettier:check

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: terraform validate & format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate
            terraform fmt -check

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: terraform plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: terraform apply
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output cinema_bucket_name > ../cinema_bucket_name.txt
            terraform output cloudfront_bucket_name > ../cloudfront_bucket_name.txt
      - persist_to_workspace:
          root: ./
          path:
            - artifacts
      
  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS s3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/cinema_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
        at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            $CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_bucket_name.txt | sed 's/\"//g')
            echo CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
            else
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
            fi

  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "slack notification"
      - slack/notify:
          event: fail
          channel: 'cinema-circleci'
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: 'cinema-circleci'
          template: success_tagged_deploy_1

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: terraform destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - terraform-validate:
          requires: 
            - linting
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - terraform-plan-and-apply:
          requires: 
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - main

      - deploy-to-aws-s3: 
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-cloudfront: 
          requires: 
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - notify-via-slack: 
          requires: 
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - main
     - hold:
        type: approval
        requires: 
          - deploy-to-aws-cloudfront
    - terraform-destroy:
        requires:
          - hold
        filters:
            branches:
              only:
                - develop
                - staging
                - main
